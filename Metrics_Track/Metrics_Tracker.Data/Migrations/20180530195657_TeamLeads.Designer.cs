// <auto-generated />
using Metrics_Track.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Metrics_Track.Data.Migrations
{
    [DbContext(typeof(TrackerDbContext))]
    [Migration("20180530195657_TeamLeads")]
    partial class TeamLeads
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CPS")
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("Relational:Sequence:CPS.SequenceIds", "'SequenceIds', 'CPS', '1000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Metrics_Track.Data.Models.SSC_View_MyTransactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Transaction_ID");

                    b.Property<string>("Activity");

                    b.Property<int?>("AspIDLogin")
                        .HasColumnName("AspID_Login");

                    b.Property<int>("Audit");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CompleteDate");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("Currency_Code");

                    b.Property<string>("FunctionName")
                        .HasColumnName("Function Name");

                    b.Property<double?>("HandlingTime")
                        .HasColumnName("Handling Time");

                    b.Property<int?>("IdLogin")
                        .HasColumnName("ID_Login");

                    b.Property<string>("IdNumber")
                        .HasColumnName("ID_Number");

                    b.Property<string>("Lob");

                    b.Property<string>("Mnc");

                    b.Property<int>("MultiStepTransaction")
                        .HasColumnName("Multi-Step Transaction");

                    b.Property<double?>("Premium");

                    b.Property<short?>("Priority");

                    b.Property<string>("Process");

                    b.Property<string>("ProcessMap")
                        .HasColumnName("Process Map");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<int>("SLAAchievment")
                        .HasColumnName("SLA Achievment");

                    b.Property<double?>("SLAHrs")
                        .HasColumnName("SLA Hrs");

                    b.Property<int?>("SLATarget")
                        .HasColumnName("SLA Target");

                    b.Property<int>("SLATransaction")
                        .HasColumnName("SLA Transaction");

                    b.Property<string>("SLAType")
                        .HasColumnName("SLA Type");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("TeamLeader")
                        .HasColumnName("Team Leader");

                    b.Property<string>("UserName")
                        .HasColumnName("User Name");

                    b.HasKey("TransactionId");

                    b.ToTable("SSCViewMyTransactions");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Activity", b =>
                {
                    b.Property<int>("IdActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Activity");

                    b.Property<string>("Activity")
                        .HasMaxLength(255);

                    b.HasKey("IdActivity");

                    b.ToTable("tbl_Activity","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Country");

                    b.Property<string>("Country")
                        .HasMaxLength(255);

                    b.Property<string>("RefSite")
                        .HasColumnName("Ref Site")
                        .HasMaxLength(255);

                    b.Property<int?>("SpphIdCountry")
                        .HasColumnName("SPPH_ID_Country");

                    b.HasKey("IdCountry");

                    b.ToTable("tbl_Country","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Division", b =>
                {
                    b.Property<int>("IdDivision")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Division");

                    b.Property<string>("Division")
                        .HasMaxLength(255);

                    b.HasKey("IdDivision");

                    b.ToTable("tbl_Division","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_HolidayTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Country")
                        .HasMaxLength(255);

                    b.Property<string>("FunctionName")
                        .HasColumnName("Function_Name")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("HolidayDate")
                        .HasColumnName("Holiday Date")
                        .HasColumnType("datetime");

                    b.Property<string>("TeamLead")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Holiday Table","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_InternalErrorsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(dateadd(hour,(3),getutcdate()))");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_Internal_Errors_Log","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_L2Id", b =>
                {
                    b.Property<int>("IdProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Process");

                    b.Property<string>("L2")
                        .HasMaxLength(255);

                    b.Property<string>("L2Id")
                        .HasColumnName("L2_ID")
                        .HasMaxLength(255);

                    b.HasKey("IdProcess");

                    b.ToTable("tbl_L2_ID","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Lob", b =>
                {
                    b.Property<int>("IdLob")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_LOB");

                    b.Property<string>("Lob")
                        .HasColumnName("LOB")
                        .HasMaxLength(255);

                    b.Property<string>("MmcpLob")
                        .HasColumnName("MMCP LOB")
                        .HasMaxLength(50);

                    b.Property<string>("MmcpSegment")
                        .HasColumnName("MMCP SEGMENT")
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine1")
                        .HasColumnName("Product Line 1")
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine2")
                        .HasColumnName("Product Line 2")
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine3")
                        .HasColumnName("Product Line 3")
                        .HasMaxLength(50);

                    b.Property<int?>("SpphIdProduct")
                        .HasColumnName("SPPH_ID_PRODUCT");

                    b.HasKey("IdLob");

                    b.ToTable("tbl_LOB","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Login", b =>
                {
                    b.Property<int>("IdLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Login");

                    b.Property<string>("DisplayName")
                        .HasColumnName("Display Name")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.Property<short>("Sandbox");

                    b.Property<string>("ServerName")
                        .HasMaxLength(255);

                    b.Property<string>("Site")
                        .HasMaxLength(10);

                    b.Property<int?>("SsphIdUser")
                        .HasColumnName("SSPH_ID_USER");

                    b.Property<string>("TeamLead")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("IdLogin");

                    b.ToTable("tbl_Login","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Mining", b =>
                {
                    b.Property<int>("IdMining")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Mining");

                    b.Property<string>("State")
                        .HasMaxLength(255);

                    b.HasKey("IdMining");

                    b.ToTable("tbl_Mining","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Objects", b =>
                {
                    b.Property<int>("IdObject")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Object");

                    b.Property<string>("CaptureText")
                        .HasMaxLength(255);

                    b.Property<string>("FieldName")
                        .HasMaxLength(50);

                    b.Property<double?>("Height");

                    b.Property<int>("IdCountry")
                        .HasColumnName("ID_Country");

                    b.Property<string>("IsVisible")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectName")
                        .HasMaxLength(255);

                    b.Property<string>("ObjectType")
                        .HasMaxLength(255);

                    b.Property<double?>("PositionLeft");

                    b.Property<double?>("PositionTop");

                    b.Property<double?>("Width");

                    b.HasKey("IdObject");

                    b.ToTable("tbl_Objects","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Process", b =>
                {
                    b.Property<int>("IdProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Process");

                    b.Property<string>("FunctionName")
                        .HasColumnName("Function_Name")
                        .HasMaxLength(255);

                    b.Property<string>("Group")
                        .HasMaxLength(255);

                    b.Property<string>("Level2Taxonomy")
                        .HasColumnName("Level 2 Taxonomy")
                        .HasMaxLength(255);

                    b.Property<string>("Level3Taxonomy")
                        .HasColumnName("Level 3 Taxonomy")
                        .HasMaxLength(255);

                    b.Property<string>("Mnc")
                        .IsRequired()
                        .HasColumnName("MNC")
                        .HasMaxLength(50);

                    b.Property<string>("NiceQueue")
                        .HasColumnName("Nice Queue")
                        .HasMaxLength(50);

                    b.Property<string>("Pid")
                        .HasColumnName("PID")
                        .HasMaxLength(50);

                    b.Property<string>("Process")
                        .HasMaxLength(255);

                    b.Property<string>("ProcessMap")
                        .HasColumnName("Process Map")
                        .HasMaxLength(255);

                    b.Property<string>("SlaTarget")
                        .HasColumnName("SLA Target")
                        .HasMaxLength(50);

                    b.Property<string>("SlaType")
                        .HasColumnName("SLA Type")
                        .HasMaxLength(50);

                    b.Property<int?>("SpphIdProcess")
                        .HasColumnName("SPPH_ID_PROCESS");

                    b.HasKey("IdProcess");

                    b.ToTable("tbl_Process","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_QualityIntegration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double?>("QualityPtsScored")
                        .HasColumnName("Quality_Pts_Scored");

                    b.Property<double?>("QualityPtsTotal")
                        .HasColumnName("Quality_Pts_Total");

                    b.Property<int>("TransactionId")
                        .HasColumnName("Transaction_ID");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasName("C_Unique_Transaction_ID");

                    b.ToTable("tbl_Quality_Integration","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_ReportingUsers", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_User");

                    b.Property<string>("Ntuser")
                        .HasColumnName("NTUser")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("IdUser");

                    b.ToTable("tbl_Reporting_Users","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Specific", b =>
                {
                    b.Property<int>("IdSpec")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Spec");

                    b.Property<int?>("IdMain")
                        .HasColumnName("ID_Main");

                    b.Property<string>("IdNumber")
                        .HasColumnName("ID_Number")
                        .HasMaxLength(255);

                    b.HasKey("IdSpec");

                    b.ToTable("tbl_Specific","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Status");

                    b.Property<string>("Status")
                        .HasMaxLength(255);

                    b.HasKey("IdStatus");

                    b.ToTable("tbl_Status","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_TeamLead", b =>
                {
                    b.Property<int>("IdTeamLead")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_TeamLead");

                    b.Property<string>("TeamLead")
                        .HasMaxLength(255);

                    b.HasKey("IdTeamLead");

                    b.ToTable("TblTeamLead");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_Tower", b =>
                {
                    b.Property<int>("IdTower")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Tower");

                    b.Property<string>("Tower")
                        .HasMaxLength(255);

                    b.HasKey("IdTower");

                    b.ToTable("tbl_Tower","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_TowerCategory", b =>
                {
                    b.Property<int>("IdTowerCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_TowerCategory");

                    b.Property<string>("TowerCategory")
                        .HasMaxLength(255);

                    b.HasKey("IdTowerCategory");

                    b.ToTable("tbl_TowerCategory","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_TrackerVer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Change")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ChangeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(3),getutcdate()))");

                    b.Property<string>("Request")
                        .HasMaxLength(500);

                    b.Property<string>("Version")
                        .HasColumnType("nchar(10)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Tracker_Ver","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_UserActivity", b =>
                {
                    b.Property<int>("IdUserActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_UserActivity");

                    b.Property<DateTime?>("ChangeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<int?>("IdLogin")
                        .HasColumnName("ID_Login");

                    b.Property<string>("MetricsTrackVer")
                        .HasColumnName("Metrics_Track_Ver")
                        .HasMaxLength(255);

                    b.Property<short>("Sandbox");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.HasKey("IdUserActivity");

                    b.HasIndex("IdLogin");

                    b.ToTable("tbl_UserActivity","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_VolumeMain", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Transaction_ID");

                    b.Property<string>("Attachments")
                        .HasMaxLength(150);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("Currency_Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateReceivedInAig")
                        .HasColumnName("Date_Received_in_AIG")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdActivity")
                        .HasColumnName("ID_Activity");

                    b.Property<string>("IdContract")
                        .HasColumnName("ID_Contract")
                        .HasMaxLength(50);

                    b.Property<int?>("IdCountry")
                        .HasColumnName("ID_Country");

                    b.Property<int?>("IdDivision")
                        .HasColumnName("ID_Division");

                    b.Property<int?>("IdLob")
                        .HasColumnName("ID_LOB");

                    b.Property<int?>("IdLogin")
                        .HasColumnName("ID_Login");

                    b.Property<string>("IdNumber")
                        .HasColumnName("ID_Number")
                        .HasMaxLength(500);

                    b.Property<string>("IdPartner")
                        .HasColumnName("ID_Partner")
                        .HasMaxLength(50);

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.Property<int?>("IdStatus")
                        .HasColumnName("ID_Status");

                    b.Property<int?>("IdTower")
                        .HasColumnName("ID_Tower");

                    b.Property<int?>("IdTowerCategory")
                        .HasColumnName("ID_TowerCategory");

                    b.Property<double?>("IdleHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Idle_Hours")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("InceptionDate")
                        .HasColumnName("Inception_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuredName")
                        .HasColumnName("Insured_Name")
                        .HasMaxLength(150);

                    b.Property<int?>("OriginalId")
                        .HasColumnName("Original_ID");

                    b.Property<double?>("PrecalcHt")
                        .HasColumnName("Precalc HT");

                    b.Property<double?>("PrecalcSlaHours")
                        .HasColumnName("Precalc SLA Hours");

                    b.Property<double?>("Premium");

                    b.Property<short?>("Priority");

                    b.Property<DateTime?>("QualityInspectionDate")
                        .HasColumnName("Quality_Inspection_Date")
                        .HasColumnType("datetime");

                    b.Property<double?>("QualityPtsScored")
                        .HasColumnName("Quality_Pts_Scored");

                    b.Property<double?>("QualityPtsTotal")
                        .HasColumnName("Quality_Pts_Total");

                    b.Property<string>("QualityReviewer")
                        .HasColumnName("Quality_Reviewer")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Sandbox")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("StatusCode")
                        .HasColumnName("Status_Code");

                    b.Property<string>("TransactionRequestor")
                        .HasColumnName("Transaction_Requestor")
                        .HasMaxLength(150);

                    b.Property<string>("WorkCode")
                        .HasColumnName("Work_Code")
                        .HasMaxLength(150);

                    b.HasKey("TransactionId");

                    b.HasIndex("IdActivity");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdDivision");

                    b.HasIndex("IdLob");

                    b.HasIndex("IdLogin");

                    b.HasIndex("IdProcess");

                    b.HasIndex("IdStatus");

                    b.HasIndex("IdTower");

                    b.HasIndex("IdTowerCategory");

                    b.HasIndex("TransactionId", "StartDate", "OriginalId", "CompleteDate", "StatusCode")
                        .HasName("NonClusteredIndex-20180216-113906");

                    b.ToTable("tbl_Volume_Main","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_AgentCountry", b =>
                {
                    b.Property<string>("IdAgent");

                    b.Property<int>("IdCountry");

                    b.HasKey("IdAgent", "IdCountry");

                    b.HasIndex("IdCountry");

                    b.ToTable("trel_AgentCountry","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_CountryMining", b =>
                {
                    b.Property<int>("IdCountry");

                    b.Property<int>("IdMining");

                    b.HasKey("IdCountry", "IdMining");

                    b.HasIndex("IdMining");

                    b.ToTable("trel_CountryMining","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_CountryProcess", b =>
                {
                    b.Property<int>("IdCp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_CP");

                    b.Property<int?>("IdCountry")
                        .HasColumnName("ID_Country");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.HasKey("IdCp");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdProcess");

                    b.ToTable("trel_CountryProcess","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessActivity", b =>
                {
                    b.Property<int>("IdPa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PA");

                    b.Property<int?>("IdActivity")
                        .HasColumnName("ID_Activity");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.HasKey("IdPa");

                    b.HasIndex("IdActivity");

                    b.HasIndex("IdProcess");

                    b.ToTable("trel_ProcessActivity","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessDivision", b =>
                {
                    b.Property<int>("IdPd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PD");

                    b.Property<int?>("IdDivision")
                        .HasColumnName("ID_Division");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.HasKey("IdPd");

                    b.HasIndex("IdDivision");

                    b.HasIndex("IdProcess");

                    b.ToTable("trel_ProcessDivision","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessLob", b =>
                {
                    b.Property<int>("IdPl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PL");

                    b.Property<int?>("IdLob")
                        .HasColumnName("ID_LOB");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.HasKey("IdPl");

                    b.HasIndex("IdLob");

                    b.HasIndex("IdProcess");

                    b.ToTable("trel_ProcessLOB","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessStatus", b =>
                {
                    b.Property<int>("IdSp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_SP");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.Property<int?>("IdStatus")
                        .HasColumnName("ID_Status");

                    b.HasKey("IdSp");

                    b.HasIndex("IdProcess");

                    b.HasIndex("IdStatus");

                    b.ToTable("trel_ProcessStatus","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessTower", b =>
                {
                    b.Property<int>("IdPt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PT");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.Property<int?>("IdTower")
                        .HasColumnName("ID_Tower");

                    b.HasKey("IdPt");

                    b.HasIndex("IdProcess");

                    b.HasIndex("IdTower");

                    b.ToTable("trel_ProcessTower","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessTowerCategory", b =>
                {
                    b.Property<int>("IdPtg")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PTG");

                    b.Property<int?>("IdProcess")
                        .HasColumnName("ID_Process");

                    b.Property<int?>("IdTowerCategory")
                        .HasColumnName("ID_TowerCategory");

                    b.HasKey("IdPtg");

                    b.HasIndex("IdProcess");

                    b.HasIndex("IdTowerCategory");

                    b.ToTable("trel_ProcessTowerCategory","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_UserCountry", b =>
                {
                    b.Property<int>("IdUc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_UC");

                    b.Property<int?>("IdCountry")
                        .HasColumnName("ID_Country");

                    b.Property<int?>("IdLogin")
                        .HasColumnName("ID_Login");

                    b.HasKey("IdUc");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdLogin");

                    b.ToTable("trel_UserCountry","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_UserMining", b =>
                {
                    b.Property<int>("IdUm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_UM");

                    b.Property<int?>("IdLogin")
                        .HasColumnName("ID_Login");

                    b.Property<int?>("IdMining")
                        .HasColumnName("ID_Mining");

                    b.HasKey("IdUm");

                    b.HasIndex("IdLogin");

                    b.HasIndex("IdMining");

                    b.ToTable("trel_UserMining","CPS");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("IdLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_Login")
                        .HasDefaultValueSql("NEXT VALUE FOR CPS.SequenceIds");

                    b.Property<int>("IdTeamLead")
                        .HasColumnName("ID_TeamLead");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<short>("Sandbox");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IdTeamLead")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_UserActivity", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Login", "IdLoginNavigation")
                        .WithMany("TblUserActivity")
                        .HasForeignKey("IdLogin")
                        .HasConstraintName("FK_tbl_UserActivity_tbl_Login");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.tbl_VolumeMain", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Activity", "IdActivityNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdActivity")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Activity");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Country", "IdCountryNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Country");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Division", "IdDivisionNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdDivision")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Division");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Lob", "IdLobNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdLob")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_LOB");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Login", "IdLoginNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdLogin")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Login");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Process");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Status", "IdStatusNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Status");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Tower", "IdTowerNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdTower")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_Tower");

                    b.HasOne("Metrics_Track.Data.Models.tbl_TowerCategory", "IdTowerCategoryNavigation")
                        .WithMany("TblVolumeMain")
                        .HasForeignKey("IdTowerCategory")
                        .HasConstraintName("FK_tbl_Volume_Main_tbl_TowerCategory");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_AgentCountry", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.User", "Agent")
                        .WithMany("Countries")
                        .HasForeignKey("IdAgent")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Metrics_Track.Data.Models.tbl_Country", "Country")
                        .WithMany("Agents")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_CountryMining", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Country", "Country")
                        .WithMany("Minings")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Metrics_Track.Data.Models.tbl_Mining", "Mining")
                        .WithMany("Countries")
                        .HasForeignKey("IdMining")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_CountryProcess", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Country", "IdCountryNavigation")
                        .WithMany("TrelCountryProcess")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_trel_CountryProcess_tbl_Country");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelCountryProcess")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_CountryProcess_tbl_Process");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessActivity", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Activity", "IdActivityNavigation")
                        .WithMany("TrelProcessActivity")
                        .HasForeignKey("IdActivity")
                        .HasConstraintName("FK_trel_ProcessActivity_tbl_Activity");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessActivity")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessActivity_tbl_Process");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessDivision", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Division", "IdDivisionNavigation")
                        .WithMany("TrelProcessDivision")
                        .HasForeignKey("IdDivision")
                        .HasConstraintName("FK_trel_ProcessDivision_tbl_Division");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessDivision")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessDivision_tbl_Process");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessLob", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Lob", "IdLobNavigation")
                        .WithMany("TrelProcessLob")
                        .HasForeignKey("IdLob")
                        .HasConstraintName("FK_trel_ProcessLOB_tbl_LOB");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessLob")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessLOB_tbl_Process");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessStatus", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessStatus")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessStatus_tbl_Process");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Status", "IdStatusNavigation")
                        .WithMany("TrelProcessStatus")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("FK_trel_ProcessStatus_tbl_Status");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessTower", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessTower")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessTower_tbl_Process");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Tower", "IdTowerNavigation")
                        .WithMany("TrelProcessTower")
                        .HasForeignKey("IdTower")
                        .HasConstraintName("FK_trel_ProcessTower_tbl_Tower");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_ProcessTowerCategory", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Process", "IdProcessNavigation")
                        .WithMany("TrelProcessTowerCategory")
                        .HasForeignKey("IdProcess")
                        .HasConstraintName("FK_trel_ProcessTowerCategory_tbl_Process");

                    b.HasOne("Metrics_Track.Data.Models.tbl_TowerCategory", "IdTowerCategoryNavigation")
                        .WithMany("TrelProcessTowerCategory")
                        .HasForeignKey("IdTowerCategory")
                        .HasConstraintName("FK_trel_ProcessTowerCategory_tbl_TowerCategory");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_UserCountry", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Country", "IdCountryNavigation")
                        .WithMany("TrelUserCountry")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_trel_UserCountry_tbl_Country");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Login", "IdLoginNavigation")
                        .WithMany("TrelUserCountry")
                        .HasForeignKey("IdLogin")
                        .HasConstraintName("FK_trel_UserCountry_tbl_Login");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.trel_UserMining", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_Login", "IdLoginNavigation")
                        .WithMany("TrelUserMining")
                        .HasForeignKey("IdLogin")
                        .HasConstraintName("FK_trel_UserMining_tbl_Login");

                    b.HasOne("Metrics_Track.Data.Models.tbl_Mining", "IdMiningNavigation")
                        .WithMany("TrelUserMining")
                        .HasForeignKey("IdMining")
                        .HasConstraintName("FK_trel_UserMining_tbl_Mining");
                });

            modelBuilder.Entity("Metrics_Track.Data.Models.User", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.tbl_TeamLead", "TeamLead")
                        .WithOne("User")
                        .HasForeignKey("Metrics_Track.Data.Models.User", "IdTeamLead")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Metrics_Track.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Metrics_Track.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
